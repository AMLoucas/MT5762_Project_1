ls
cannabisData <- read.csv("potplants_MT5762.csv")
View(cannabisData)
View(cannabisData)
library(tidyverse)
cannabisData <- cannabisData %>%
select(Group,
Mg,
K,
Ca,
Mn,
Fe)
View(cannabisData)
View(cannabisData)
group_MB <- cannabisData %>%
filter(Group == "mb")
View(group_MB)
View(group_MB)
group_PM <- cannabisData %>%
filter(Group == "pm")
group_BHB <- cannabisData %>%
filter(Group == "bhb")
group_NTH <- cannabisData %>%
filter(Group == "nth")
View(group_NTH)
View(group_PM)
View(group_MB)
View(group_BHB)
View(group_PM)
View(group_PM)
View(group_MB)
View(group_MB)
install.packages(car)
"car"
install.packages("car")
# Importing package tidyverse to use powerful functions to clean data and create plots.
# Importing package car to use levene's test to check assumptions for ANalysis Of VAriance.
# You need to have both packages installed to run the R-Script.
library(tidyverse)
library(car)
# Reading the data out of the CSV files.
cannabisData <- read.csv("DATA/potplants_MT5762.csv")
head(cannabisData)
# Selecting only the columns i am interested in.
cannabisData <- cannabisData %>%
select(Group, Mg, K, Ca, Ai, Sc)
# Selecting only the columns i am interested in.
cannabisData <- cannabisData %>%
select(Group, Mg, K, Ca, AI, Sc)
# Selecting only the columns i am interested in.
cannabisData <- cannabisData %>%
select(Group, Mg, K, Ca, Al, Sc)
head(cannabisData)
rm(list = ls())
# Importing package tidyverse to use powerful functions to clean data and create plots.
# Importing package car to use levene's test to check assumptions for ANalysis Of VAriance.
# You need to have both packages installed to run the R-Script.
library(tidyverse)
# Tidyverse import overrides two in built functions filter() and log()
library(car)
# Reading the data out of the CSV files.
cannabisData <- read.csv("DATA/potplants_MT5762.csv")
# Selecting only the columns i am interested in.
cannabisData <- cannabisData %>%
select(Group, Mg, K, Ca, Al, Sc)
# Anova Test For Mg
MG.aov <- aov(Mg ~ Group, data = cannabisData)
summary(MG.aov)
MG.aov$residuals
MG.aov$df.residual
MG.aov$df.group
# Critical value, testing at a significance level of 5%
qf(p = 0.05, df1 = 3, df2 = MG.aov$df.residual, lower.tail = FALSE)
# Plotting BoxPlots for each Element.
ggplot(cannabisData) +
geom_boxplot(aes(x = Group, y = Mg, colour = Group))
# K
ggplot(cannabisData) +
geom_boxplot(aes(x = Group, y = K, colour = Group))
# Plotting BoxPlots for each Element.
# Mg
ggplot(cannabisData) +
geom_boxplot(aes(x = Group, y = Mg, colour = Group))
# K
ggplot(cannabisData) +
geom_boxplot(aes(x = Group, y = K, colour = Group))
# Ca
ggplot(cannabisData) +
geom_boxplot(aes(x = Group, y = Ca, colour = Group))
# Al
ggplot(cannabisData) +
geom_boxplot(aes(x = Group, y = Al, colour = Group))
# Sc
ggplot(cannabisData) +
geom_boxplot(aes(x = Group, y = Sc, colour = Group))
# Sc
ggplot(cannabisData) +
geom_boxplot(aes(x = Group, y = Sc, colour = Group))
# Calling self-declared funtion that creates BoxPlot for each of the elements.
# Mg
createBoxPlot(cannabisData, cannabisData$Mg)
# Function that creates a BoxPlot for the Data
createBoxPlot <- function(cannabisData, element){
ggplot(cannabisData) +
geom_boxplot(aes(x = Group, y = element, colour = Group))
}
# Calling self-declared funtion that creates BoxPlot for each of the elements.
# Mg
createBoxPlot(cannabisData, cannabisData$Mg)
# K
createBoxPlot(cannabisData, cannabisData$K)
# Ca
createBoxPlot(cannabisData, cannabisData$Ca)
# Al
createBoxPlot(cannabisData, cannabisData$Al)
# Sc
createBoxPlot(cannabisData, cannabisData$Sc)
# Function that implements the ANOVA test.
applyAnovaTest <- function(cannabisData, element){
# Anova Testing
MG.aov <- aov(element ~ Group, data = cannabisData)
summary(MG.aov)
# Critical value 0.05 . Checking at type-I-error of 5% . Confidence Interval 95%
qf(p = 0.05, df1 = 3, df2 = MG.aov$df.residual, lower.tail = FALSE)
}
# Calling Self-declared function to apply ANOVA TEST for each element.
# Mg
applyAnovaTest(cannabisData, cannabisData$Mg)
# Anova Testing
MG.aov <- aov(Mg ~ Group, data = cannabisData)
summary(MG.aov)
MG.aov$fitted.values
MG.aov$coefficients
MG.aov$coefficients
MG.aov$F-Value
# Anova Testing
MG.aov <- aov(element ~ Group, data = cannabisData)
summary(MG.aov)
# Calling Self-declared function to apply ANOVA TEST for each element.
# Mg
applyAnovaTest(cannabisData, cannabisData$Mg)
# Function that implements the ANOVA test.
applyAnovaTest <- function(cannabisData, element){
# Anova Testing
MG.aov <- aov(element ~ Group, data = cannabisData)
print(summary(MG.aov))
# Critical value 0.05 . Checking at type-I-error of 5% . Confidence Interval 95%
qf(p = 0.05, df1 = 3, df2 = MG.aov$df.residual, lower.tail = FALSE)
return(summary(MG.aov))
}
# Calling Self-declared function to apply ANOVA TEST for each element.
# Mg
summaryMg = applyAnovaTest(cannabisData, cannabisData$Mg)
summaryMg
# Function that implements the ANOVA test.
applyAnovaTest <- function(cannabisData, element){
# Anova Testing
MG.aov <- aov(element ~ Group, data = cannabisData)
print(summary(MG.aov))
# Critical value 0.05 . Checking at type-I-error of 5% . Confidence Interval 95%
print(qf(p = 0.05, df1 = 3, df2 = MG.aov$df.residual, lower.tail = FALSE))
}
# Calling Self-declared function to apply ANOVA TEST for each element.
# Mg
applyAnovaTest(cannabisData, cannabisData$Mg)
# K
applyAnovaTest(cannabisData, cannabisData$K)
# Ca
applyAnovaTest(cannabisData, cannabisData$Ca)
# Al
applyAnovaTest(cannabisData, cannabisData$Al)
# Sc
applyAnovaTest(cannabisData, cannabisData$Sc)
# Function that implements the ANOVA test.
applyAnovaTest <- function(cannabisData, element){
# Anova Testing
ANOVA_result <- aov(element ~ Group, data = cannabisData)
print(summary(ANOVA_result))
# Critical value 0.05 . Checking at type-I-error of 5% . Confidence Interval 95%
print(qf(p = 0.05, df1 = 3, df2 = ANOVA_result$df.residual, lower.tail = FALSE))
}
# Function that checks Constant Spread Assumption. Variances are equal for ANOVA.
applyLebeneTest <- function(cannabisData, element){
leveneTest(element ~ Group, data = cannabisData)
}
# Function that checks Constant Spread Assumption. Variances are equal for ANOVA.
applyLeveneTest <- function(cannabisData, element){
leveneTest(element ~ Group, data = cannabisData)
}
# Calling Self-declared function to apply Levene Test and test Constant Spread Assumption.
# Mg
applyLeveneTest(cannabisData, cannabisData$Mg)
# Calling Self-declared function to apply Levene Test and test Constant Spread Assumption.
# Mg
applyLeveneTest(cannabisData, as.factor(cannabisData$Mg))
# Selecting only the columns i am interested in.
cannabisData <- cannabisData %>%
select(Group, Mg, K, Ca, Al, Sc)
cannabisData <- cannabisData %>%
mutate_if(is.character, as.factor)
head(cannabisData)
class(cannabisData$Group)
# Calling Self-declared function to apply Levene Test and test Constant Spread Assumption.
# Mg
applyLeveneTest(cannabisData, cannabisData$Mg)
# K
applyLeveneTest(cannabisData, cannabisData$K)
# Ca
applyLeveneTest(cannabisData, cannabisData$Ca)
# Al
applyLeveneTest(cannabisData, cannabisData$Al)
# Sc
applyLeveneTest(cannabisData, cannabisData$Sc)
# Function that implements the ANOVA test.
applyAnovaTest <- function(cannabisData, element){
# Anova Testing
ANOVA_result <- aov(element ~ Group, data = cannabisData)
print(summary(ANOVA_result))
# Critical value 0.05 . Checking at type-I-error of 5% . Confidence Interval 95%
print(qf(p = 0.05, df1 = 3, df2 = ANOVA_result$df.residual, lower.tail = FALSE))
# Return residual values to apply Shapiro Test later for assumption.
return(ANOVA_result$residuals)
}
# Calling Self-declared function to apply ANOVA TEST for each element.
# Mg
MG.residuals <- applyAnovaTest(cannabisData, cannabisData$Mg)
# K
K.residuals <- applyAnovaTest(cannabisData, cannabisData$K)
# Ca
Ca.residuals <- applyAnovaTest(cannabisData, cannabisData$Ca)
# Al
Al.residuals <- applyAnovaTest(cannabisData, cannabisData$Al)
# Sc
Sc.residulas <- applyAnovaTest(cannabisData, cannabisData$Sc)
# Function that checks Normality of Data. [Shapiro-Wilk]. Data comes from Normal Distribution.
applyShapiroTest <- function(residual){
print(shapiro.test(residual))
}
# Calling a Self-declared function to apply the Shapiro-Wilk Test, testing Normality.
# Mg
applyShapiroTest(MG.residuals)
# K
applyShapiroTest(K.residuals)
# Ca
applyShapiroTest(Ca.residuals)
# Al
applyShapiroTest(Al.residuals)
# Sc
applyShapiroTest(Sc.residuals)
# Sc
Sc.residuals <- applyAnovaTest(cannabisData, cannabisData$Sc)
# Sc
applyShapiroTest(Sc.residuals)
# Calling a Self-declared function to apply the Shapiro-Wilk Test, testing Normality.
# Mg
applyShapiroTest(MG.residuals)
# K
applyShapiroTest(K.residuals)
# Ca
applyShapiroTest(Ca.residuals)
# Al
applyShapiroTest(Al.residuals)
# Sc
applyShapiroTest(Sc.residuals)
# Calling Self-declared function to apply Levene Test and test Constant Spread Assumption.
# Mg
applyLeveneTest(cannabisData, cannabisData$Mg)
# K
applyLeveneTest(cannabisData, cannabisData$K)
# Ca
applyLeveneTest(cannabisData, cannabisData$Ca)
# Al
applyLeveneTest(cannabisData, cannabisData$Al)
# Sc
applyLeveneTest(cannabisData, cannabisData$Sc)
# Calling Self-declared function to apply Levene Test and test Constant Spread Assumption.
# Mg
applyLeveneTest(cannabisData, cannabisData$Mg)
# K
applyLeveneTest(cannabisData, cannabisData$K)
# Ca
applyLeveneTest(cannabisData, cannabisData$Ca)
# Al
applyLeveneTest(cannabisData, cannabisData$Al)
# Sc
applyLeveneTest(cannabisData, cannabisData$Sc)
# Function that finds the corelation value between 2 continuous variables.
findCorrelation <- function(cannabisData, element1, element2){
print(cor(cannabisData$element1, cannabisData$element2))
}
#### Commands needed to execute Question 3.
## callinf function to find correlation between 2 elements.
findCorrelation(cannabisData$Mg, cannabisData$K)
# Function that finds the corelation value between 2 continuous variables.
findCorrelation <- function(cannabisData, element1, element2){
print(cor(element1 ~ Group, element2 ~ Group))
}
#### Commands needed to execute Question 3.
## callinf function to find correlation between 2 elements.
findCorrelation(cannabisData$Mg, cannabisData$K)
# Function that finds the corelation value between 2 continuous variables.
findCorrelation <- function(element1, element2){
print(cor(element1, element2))
}
#### Commands needed to execute Question 3.
## callinf function to find correlation between 2 elements.
findCorrelation(cannabisData$Mg, cannabisData$K)
# Mg with Ca
findCorrelation(cannabisData$Mg, cannabisData$Ca)
# K with Ca
findCorrelation(cannabisData$K, cannabisData$Ca)
# Al with Sc
findCorrelation(cannabisData$Al, cannabisData$Sc)
# Mg with Al
findCorrelation(cannabisData$Mg, cannabisData$Al)
